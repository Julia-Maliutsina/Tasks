{"version":3,"sources":["api/deleteNote.js","components/myNotes/Note.jsx","components/myNotes/NoteContainer.jsx","components/myNotes/NotesList.jsx","api/shareNote.js","components/myNotes/actions/ShareNoteForm.jsx","components/myNotes/actions/ShareNoteContainer.jsx","components/myNotes/NotesListContainer.jsx"],"names":["deleteNote","id","user","setNotes","setPage","console","log","noteUrl","URLS","SERVER_NOTES","axios","method","url","headers","Authorization","then","response","catch","error","Note","note","displayChosenNote","shareNote","setNoteToRemove","ListItem","divider","ListItemButton","onClick","ListItemText","primary","Typography","style","styles","noteTitle","title","secondary","Fragment","sx","inlineBlock","component","noteInList","className","shortenDescription","description","toLocalDate","createdAt","IconButton","color","shareIcon","deleteIcon","NoteContainer","removeNote","useState","INIT","ID","noteToRemove","useEffect","length","Notes","notesToDisplay","page","changePosition","allNotes","onDragEnd","parameters","Alert","variant","severity","noNotes","MESSAGES","NO_NOTES","droppableId","provided","snapshot","droppable","ref","innerRef","droppableProps","List","dataLength","next","hasMore","scrollableTarget","map","i","draggableId","index","draggableProps","dragHandleProps","boxShadow","isDragging","draggingShadow","background","draggingBackground","placeholder","shareNoteWithUsers","idToShare","usersToShare","setNoteToShare","setUsersToShare","shareNoteOpen","setAlertShare","setShareError","SERVER_SHARE","data","ACTIVE","ShareNoteForm","openShare","noteToShare","removeUser","setUser","setUserToShare","userEmailValue","addUserToList","cancelShare","shareNoteSubmit","alertShareOpen","handleAlertShareClose","shareError","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","dialogShare","shareNoteTitles","shareNoteText","substr","email","emailId","emailsList","widthEmail","clearUsers","e","Clear","fontSize","TextareaAutosize","value","minRows","maxLength","minLength","userToShare","onFocus","onChange","target","Button","addUsers","Add","inline","Snackbar","autoHideDuration","maxWidth","DialogActions","addNoteButtons","cancelShareButton","Cancel","saveIcon","primaryButton","ShareNoteContainer","usersArray","splice","userEmail","push","event","reason","NotesListContainer","noteId"],"mappings":"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","file":"static/js/4.2cf535fa.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport URLS from \"config/constants/url\";\r\n\r\nconst deleteNote = (id, user, setNotes, setPage) => {\r\n\tconsole.log(id);\r\n\tconst noteUrl = URLS.SERVER_NOTES + \"/\" + id;\r\n\taxios({\r\n\t\tmethod: \"DELETE\",\r\n\t\turl: noteUrl,\r\n\t\theaders: { Authorization: `Basic ${user}` },\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\tsetNotes([]);\r\n\t\t\tsetPage(1);\r\n\t\t})\r\n\t\t.catch((error) => error);\r\n};\r\n\r\nexport default deleteNote;\r\n","import React from \"react\";\r\nimport { IconButton, Typography, ListItemText, ListItemButton, ListItem } from \"@mui/material\";\r\nimport IosShareIcon from \"@mui/icons-material/IosShare\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"pages/styled\";\r\nimport shortenDescription from \"utils/noteShortDescription\";\r\nimport toLocalDate from \"utils/toLocalDate\";\r\n\r\nconst Note = ({ note, displayChosenNote, shareNote, setNoteToRemove }) => (\r\n  <ListItem divider>\r\n    <ListItemButton\r\n      onClick={() => {\r\n        displayChosenNote(note);\r\n      }}\r\n    >\r\n      <ListItemText\r\n        primary={<Typography style={styles.noteTitle}>{note.title}</Typography>}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography sx={styles.inlineBlock} component=\"span\" style={styles.noteInList} className=\"shortDescription\">\r\n              {shortenDescription(note.description)}\r\n            </Typography>\r\n            {toLocalDate(note.createdAt)}\r\n          </React.Fragment>\r\n        }\r\n        style={styles.noteInList}\r\n      />\r\n    </ListItemButton>\r\n    <IconButton onClick={() => shareNote(note)} color=\"inherit\" component=\"span\">\r\n      <IosShareIcon style={styles.shareIcon} />\r\n    </IconButton>\r\n    <IconButton\r\n      onClick={() => {\r\n        setNoteToRemove(note.id);\r\n      }}\r\n      color=\"inherit\"\r\n      component=\"span\"\r\n    >\r\n      <DeleteIcon style={styles.deleteIcon} />\r\n    </IconButton>\r\n  </ListItem>\r\n);\r\nNote.propTypes = {\r\n  note: PropTypes.object,\r\n  displayChosenNote: PropTypes.func,\r\n  shareNote: PropTypes.func,\r\n  setNoteToRemove: PropTypes.func,\r\n};\r\nexport default Note;\r\n","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\n\r\nimport Note from \"./Note\";\r\n\r\nconst NoteContainer = ({ note, displayChosenNote, shareNote, removeNote }) => {\r\n  const [noteToRemove, setNoteToRemove] = useState(INIT.ID);\r\n  useEffect(() => {\r\n    if (noteToRemove.length > INIT.ID) removeNote(noteToRemove);\r\n  }, [noteToRemove]);\r\n  return (\r\n    <Note note={note} displayChosenNote={displayChosenNote} shareNote={shareNote} setNoteToRemove={setNoteToRemove} />\r\n  );\r\n};\r\nNoteContainer.propTypes = {\r\n  note: PropTypes.object,\r\n  displayChosenNote: PropTypes.func,\r\n  shareNote: PropTypes.func,\r\n  removeNote: PropTypes.func,\r\n};\r\nexport default NoteContainer;\r\n","import List from \"@mui/material/List\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MESSAGES from \"config/constants/messages\";\r\nimport styles from \"pages/styled\";\r\n\r\nimport NoteContainer from \"./NoteContainer\";\r\n\r\nconst Notes = ({ displayChosenNote, notesToDisplay, setPage, page, changePosition, shareNote, removeNote }) => (\r\n  <div style={styles.allNotes}>\r\n    <DragDropContext\r\n      onDragEnd={(parameters) => {\r\n        changePosition(parameters);\r\n      }}\r\n    >\r\n      {notesToDisplay.length === 0 ? (\r\n        <Alert variant=\"filled\" severity=\"info\" id=\"saveNoteError\" style={styles.noNotes}>\r\n          {MESSAGES.NO_NOTES}\r\n        </Alert>\r\n      ) : (\r\n        <Droppable droppableId=\"droppable-1\">\r\n          {(provided, snapshot) => (\r\n            <div id=\"scrollableDiv\" style={styles.droppable} ref={provided.innerRef} {...provided.droppableProps}>\r\n              <List>\r\n                <InfiniteScroll\r\n                  dataLength={notesToDisplay.length}\r\n                  next={() => setPage(page + 1)}\r\n                  hasMore={true}\r\n                  scrollableTarget=\"scrollableDiv\"\r\n                >\r\n                  {notesToDisplay.map((note, i) => (\r\n                    <Draggable draggableId={\"draggable\" + i} key={i} index={i}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={{\r\n                            ...provided.draggableProps.style,\r\n                            boxShadow: snapshot.isDragging ? styles.draggingShadow : \"none\",\r\n                            background: snapshot.isDragging ? styles.draggingBackground : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <NoteContainer\r\n                            note={note}\r\n                            displayChosenNote={displayChosenNote}\r\n                            shareNote={shareNote}\r\n                            removeNote={removeNote}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </InfiniteScroll>\r\n              </List>\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      )}\r\n    </DragDropContext>\r\n  </div>\r\n);\r\nNotes.propTypes = {\r\n  notesToDisplay: PropTypes.arrayOf(PropTypes.object),\r\n  displayChosenNote: PropTypes.func,\r\n  setPage: PropTypes.func,\r\n  page: PropTypes.number,\r\n  changePosition: PropTypes.func,\r\n  shareNote: PropTypes.func,\r\n  removeNote: PropTypes.func,\r\n};\r\nexport default Notes;\r\n","import axios from \"axios\"\r\n\r\nimport URLS from \"config/constants/url\"\r\nimport INIT from \"config/constants/initial\";\r\n\r\nconst shareNoteWithUsers = (idToShare, usersToShare, user, setNoteToShare, setUsersToShare, shareNoteOpen, setAlertShare, setShareError) => {\r\n  const noteUrl = URLS.SERVER_SHARE + \"/\" + idToShare;\r\n\taxios({\r\n\t  method: 'PUT',\r\n\t  url: noteUrl,\r\n\t  headers: {Authorization: `Basic ${user}`},\r\n\t  data: {\"users\": usersToShare},\r\n\t})\r\n\t.then((response) => {\r\n    setNoteToShare(INIT.ACTIVE);\r\n    setUsersToShare([]);\r\n    shareNoteOpen(false);\r\n  })\r\n\t.catch((error) => {\r\n    setAlertShare(true);\r\n    setShareError(error.response.data);\r\n  })\r\n}\r\n\r\nexport default shareNoteWithUsers","import {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextareaAutosize,\r\n  Button,\r\n  IconButton,\r\n  Alert,\r\n  Snackbar,\r\n  ListItem,\r\n} from \"@mui/material\";\r\nimport { Cancel, IosShare, Add, Clear } from \"@mui/icons-material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"pages/styled\";\r\n\r\nconst ShareNoteForm = ({\r\n  openShare,\r\n  noteToShare,\r\n  usersToShare,\r\n  removeUser,\r\n  setUser,\r\n  setUserToShare,\r\n  userEmailValue,\r\n  addUserToList,\r\n  cancelShare,\r\n  shareNoteSubmit,\r\n  alertShareOpen,\r\n  handleAlertShareClose,\r\n  shareError,\r\n}) => (\r\n  <Dialog open={openShare} onClose={() => {}}>\r\n    <DialogTitle style={styles.shareNote}>Share note</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText style={styles.dialogShare}>\r\n        <h4 style={styles.shareNoteTitles}>Title:</h4>\r\n        <p style={styles.shareNoteText}>{noteToShare.title}</p>\r\n        <h4 style={styles.shareNoteTitles}>Description:</h4>\r\n        <p style={styles.shareNoteText}>{noteToShare.description}</p>\r\n        <h4 style={styles.shareNoteTitles}>Date:</h4>\r\n        <p style={styles.shareNoteText}>{noteToShare.createdAt.substr(0, 10)}</p>\r\n      </DialogContentText>\r\n      <DialogContentText style={styles.shareNoteTitles}>Share with:</DialogContentText>\r\n      {usersToShare.map((email, emailId) => (\r\n        <ListItem style={styles.emailsList}>\r\n          <span style={styles.widthEmail}>{email}</span>\r\n          <IconButton style={styles.clearUsers} onClick={(e) => removeUser(emailId)}>\r\n            <Clear fontSize=\"small\" />\r\n          </IconButton>\r\n        </ListItem>\r\n      ))}\r\n      <TextareaAutosize\r\n        id=\"userToShare\"\r\n        placeholder=\"user@gmail.com\"\r\n        value={userEmailValue}\r\n        className=\"activeNote\"\r\n        minRows={null}\r\n        maxLength={40}\r\n        minLength={5}\r\n        style={styles.userToShare}\r\n        onFocus={() => setUser(\"\")}\r\n        onChange={(e) => setUserToShare(e.target.value)}\r\n      />\r\n      <Button style={styles.addUsers} onClick={addUserToList}>\r\n        <Add fontSize=\"small\" color=\"inherit\" style={styles.inline} />\r\n        <span>Add</span>\r\n      </Button>\r\n      <Snackbar open={alertShareOpen} autoHideDuration={3000} onClose={handleAlertShareClose}>\r\n        <Alert onClose={handleAlertShareClose} severity=\"error\" sx={styles.maxWidth}>\r\n          {shareError}\r\n        </Alert>\r\n      </Snackbar>\r\n    </DialogContent>\r\n    <DialogActions style={styles.addNoteButtons}>\r\n      <Button style={styles.cancelShareButton} onClick={cancelShare}>\r\n        <Cancel style={styles.saveIcon} />\r\n        Cancel\r\n      </Button>\r\n      <Button style={styles.primaryButton} variant=\"contained\" onClick={shareNoteSubmit}>\r\n        <IosShare style={styles.saveIcon} />\r\n        Share\r\n      </Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n);\r\nShareNoteForm.propTypes = {\r\n  openShare: PropTypes.bool,\r\n  noteToShare: PropTypes.object,\r\n  usersToShare: PropTypes.array,\r\n  removeUser: PropTypes.func,\r\n  setUser: PropTypes.func,\r\n  setUserToShare: PropTypes.func,\r\n  userEmailValue: PropTypes.string,\r\n  addUserToList: PropTypes.func,\r\n  cancelShare: PropTypes.func,\r\n  shareNoteSubmit: PropTypes.func,\r\n  alertShareOpen: PropTypes.bool,\r\n  handleAlertShareClose: PropTypes.func,\r\n  shareError: PropTypes.string,\r\n};\r\nexport default ShareNoteForm;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\nimport shareNoteWithUsers from \"api/shareNote\";\r\n\r\nimport ShareNoteForm from \"./ShareNoteForm\";\r\n\r\nconst ShareNoteContainer = ({ user, openShare, noteToShare, setNoteToShare, shareNoteOpen }) => {\r\n  const [userEmailValue, setUser] = useState(\"\");\r\n  const [usersToShare, setUsersToShare] = useState([]);\r\n  const [alertShareOpen, setAlertShare] = useState(false);\r\n  const [shareError, setShareError] = useState(\"\");\r\n\r\n  const setUserToShare = (userEmail) => {\r\n    setUser(userEmail);\r\n  };\r\n  const addUserToList = () => {\r\n    let usersArray = usersToShare;\r\n    usersArray.push(userEmailValue);\r\n    setUsersToShare(usersArray);\r\n    setUser(\"\");\r\n  };\r\n  const shareNoteSubmit = () => {\r\n    shareNoteWithUsers(\r\n      noteToShare.id,\r\n      usersToShare,\r\n      user,\r\n      setNoteToShare,\r\n      setUsersToShare,\r\n      shareNoteOpen,\r\n      setAlertShare,\r\n      setShareError\r\n    );\r\n  };\r\n  const cancelShare = () => {\r\n    setNoteToShare(INIT.ACTIVE);\r\n    setUsersToShare([]);\r\n    setUser(\"\");\r\n    shareNoteOpen(false);\r\n  };\r\n  const removeUser = (emailId) => {\r\n    let usersArray = usersToShare;\r\n    usersArray.splice(emailId, 1);\r\n    setUsersToShare(usersArray);\r\n    setUser(\" \");\r\n  };\r\n  const handleAlertShareClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setAlertShare(false);\r\n  };\r\n  return (\r\n    <ShareNoteForm\r\n      openShare={openShare}\r\n      noteToShare={noteToShare}\r\n      usersToShare={usersToShare}\r\n      removeUser={removeUser}\r\n      setUser={setUser}\r\n      setUserToShare={setUserToShare}\r\n      userEmailValue={userEmailValue}\r\n      addUserToList={addUserToList}\r\n      cancelShare={cancelShare}\r\n      shareNoteSubmit={shareNoteSubmit}\r\n      alertShareOpen={alertShareOpen}\r\n      handleAlertShareClose={handleAlertShareClose}\r\n      shareError={shareError}\r\n    />\r\n  );\r\n};\r\nShareNoteContainer.propTypes = {\r\n  user: PropTypes.string,\r\n  openShare: PropTypes.bool,\r\n  noteToShare: PropTypes.object,\r\n  setNoteToShare: PropTypes.func,\r\n  shareNoteOpen: PropTypes.func,\r\n};\r\nexport default ShareNoteContainer;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\nimport deleteNote from \"api/deleteNote\";\r\n\r\nimport Notes from \"./NotesList\";\r\nimport ShareNoteContainer from \"./actions/ShareNoteContainer\";\r\n\r\nconst NotesListContainer = ({ user, displayChosenNote, notesToDisplay, setNotes, setPage, page, changePosition }) => {\r\n  const [openShare, shareNoteOpen] = useState(false);\r\n  const [noteToShare, setNoteToShare] = useState(INIT.ACTIVE);\r\n\r\n  const shareNote = (note) => {\r\n    shareNoteOpen(true);\r\n    setNoteToShare(note);\r\n  };\r\n\r\n  const removeNote = (noteId) => {\r\n    console.log(noteId);\r\n    deleteNote(noteId, user, setNotes, setPage);\r\n  };\r\n  return (\r\n    <div>\r\n      <Notes\r\n        displayChosenNote={displayChosenNote}\r\n        notesToDisplay={notesToDisplay}\r\n        setPage={setPage}\r\n        page={page}\r\n        changePosition={changePosition}\r\n        shareNote={shareNote}\r\n        removeNote={removeNote}\r\n      />\r\n      <ShareNoteContainer\r\n        user={user}\r\n        openShare={openShare}\r\n        noteToShare={noteToShare}\r\n        setNoteToShare={setNoteToShare}\r\n        shareNoteOpen={shareNoteOpen}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nNotesListContainer.propTypes = {\r\n  user: PropTypes.string,\r\n  notesToDisplay: PropTypes.arrayOf(PropTypes.object),\r\n  displayChosenNote: PropTypes.func,\r\n  setPage: PropTypes.func,\r\n  page: PropTypes.number,\r\n  changePosition: PropTypes.func,\r\n  setNotes: PropTypes.func,\r\n};\r\nexport default NotesListContainer;\r\n"],"sourceRoot":""}