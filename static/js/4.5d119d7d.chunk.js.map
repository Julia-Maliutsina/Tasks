{"version":3,"sources":["api/deleteNote.js","utils/changePosition.jsx","components/myNotes/Note.jsx","components/myNotes/NoteContainer.jsx","components/myNotes/NotesList.jsx","api/shareNote.js","components/myNotes/actions/ShareNoteForm.jsx","components/myNotes/actions/ShareNoteContainer.jsx","components/myNotes/NotesListContainer.jsx"],"names":["deleteNote","id","user","setNotes","setPage","noteUrl","URLS","SERVER_NOTES","axios","method","url","headers","Authorization","then","response","catch","error","changePosition","parameters","notes","sourceIndex","source","index","destinationIndex","destination","splice","Note","note","displayChosenNote","shareNote","setNoteToRemove","ListItem","divider","ListItemButton","onClick","ListItemText","primary","Typography","style","styles","noteTitle","title","secondary","Fragment","sx","inlineBlock","component","noteInList","className","shortenDescription","description","toLocalDate","createdAt","IconButton","color","shareIcon","deleteIcon","NoteContainer","removeNote","useState","INIT","ID","noteToRemove","useEffect","length","Notes","notesToDisplay","page","allNotes","onDragEnd","Alert","variant","severity","noNotes","MESSAGES","NO_NOTES","droppableId","provided","snapshot","droppable","ref","innerRef","droppableProps","List","dataLength","next","hasMore","scrollableTarget","map","i","draggableId","draggableProps","dragHandleProps","boxShadow","isDragging","draggingShadow","background","draggingBackground","placeholder","shareNoteWithUsers","idToShare","usersToShare","setNoteToShare","setUsersToShare","shareNoteOpen","setAlertShare","setShareError","SERVER_SHARE","data","ACTIVE","ShareNoteForm","openShare","noteToShare","removeUser","setUser","setUserToShare","userEmailValue","addUserToList","cancelShare","shareNoteSubmit","alertShareOpen","handleAlertShareClose","shareError","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","dialogShare","shareNoteTitles","shareNoteText","email","emailId","emailsList","widthEmail","clearUsers","e","Clear","fontSize","TextareaAutosize","value","minRows","maxLength","minLength","userToShare","onFocus","onChange","target","Button","addUsers","Add","inline","Snackbar","autoHideDuration","maxWidth","DialogActions","addNoteButtons","cancelShareButton","Cancel","saveIcon","primaryButton","ShareNoteContainer","setAuthorizeAlertOpen","usersArray","userEmail","test","push","event","reason","NotesListContainer","noteId"],"mappings":"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","file":"static/js/4.5d119d7d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport URLS from \"config/constants/url\";\r\n\r\nconst deleteNote = (id, user, setNotes, setPage) => {\r\n\tconst noteUrl = URLS.SERVER_NOTES + \"/\" + id;\r\n\taxios({\r\n\t\tmethod: \"DELETE\",\r\n\t\turl: noteUrl,\r\n\t\theaders: { Authorization: `Bearer ${user}` },\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\tsetPage(0);\r\n\t\t\tsetNotes([]);\r\n\t\t\tsetPage(1);\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tsetNotes([]);\r\n\t\t\tsetPage(1);\t\t\t\r\n\t\t});\r\n};\r\n\r\nexport default deleteNote;\r\n","const changePosition = (parameters, notes) => {\r\n  const sourceIndex = parameters.source.index;\r\n  const destinationIndex = parameters.destination.index;\r\n  notes.splice(destinationIndex, 0, notes.splice(sourceIndex, 1)[0]);\r\n  return notes;\r\n};\r\n\r\nexport default changePosition;\r\n","import React from \"react\";\r\nimport { IconButton, Typography, ListItemText, ListItemButton, ListItem } from \"@mui/material\";\r\nimport IosShareIcon from \"@mui/icons-material/IosShare\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"pages/styled\";\r\nimport shortenDescription from \"utils/noteShortDescription\";\r\nimport toLocalDate from \"utils/toLocalDate\";\r\n\r\nconst Note = ({ note, displayChosenNote, shareNote, setNoteToRemove }) => (\r\n  <ListItem divider>\r\n    <ListItemButton\r\n      onClick={() => {\r\n        displayChosenNote(note);\r\n      }}\r\n    >\r\n      <ListItemText\r\n        primary={<Typography style={styles.noteTitle}>{note.title}</Typography>}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography sx={styles.inlineBlock} component=\"span\" style={styles.noteInList} className=\"shortDescription\">\r\n              {shortenDescription(note.description)}\r\n            </Typography>\r\n            {toLocalDate(note.createdAt)}\r\n          </React.Fragment>\r\n        }\r\n        style={styles.noteInList}\r\n        data-testid=\"noteInList\"\r\n      />\r\n    </ListItemButton>\r\n    <IconButton onClick={() => shareNote(note)} color=\"inherit\" component=\"span\" data-testid=\"shareNote\">\r\n      <IosShareIcon style={styles.shareIcon} />\r\n    </IconButton>\r\n    <IconButton\r\n      onClick={() => {\r\n        setNoteToRemove(note.id);\r\n      }}\r\n      color=\"inherit\"\r\n      component=\"span\"\r\n      data-testid=\"deleteNote\"\r\n    >\r\n      <DeleteIcon style={styles.deleteIcon} />\r\n    </IconButton>\r\n  </ListItem>\r\n);\r\nNote.propTypes = {\r\n  note: PropTypes.object,\r\n  displayChosenNote: PropTypes.func,\r\n  shareNote: PropTypes.func,\r\n  setNoteToRemove: PropTypes.func,\r\n};\r\nexport default Note;\r\n","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\n\r\nimport Note from \"./Note\";\r\n\r\nconst NoteContainer = ({ note, displayChosenNote, shareNote, removeNote }) => {\r\n  const [noteToRemove, setNoteToRemove] = useState(INIT.ID);\r\n  useEffect(() => {\r\n    if (noteToRemove.length > INIT.ID) removeNote(noteToRemove);\r\n  }, [noteToRemove]);\r\n  return (\r\n    <Note note={note} displayChosenNote={displayChosenNote} shareNote={shareNote} setNoteToRemove={setNoteToRemove} />\r\n  );\r\n};\r\nNoteContainer.propTypes = {\r\n  note: PropTypes.object,\r\n  displayChosenNote: PropTypes.func,\r\n  shareNote: PropTypes.func,\r\n  removeNote: PropTypes.func,\r\n};\r\nexport default NoteContainer;\r\n","import List from \"@mui/material/List\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MESSAGES from \"config/constants/messages\";\r\nimport styles from \"pages/styled\";\r\nimport changePosition from \"utils/changePosition\";\r\n\r\nimport NoteContainer from \"./NoteContainer\";\r\n\r\nconst Notes = ({ displayChosenNote, notesToDisplay, setPage, page, shareNote, removeNote }) => (\r\n  <div style={styles.allNotes}>\r\n    <DragDropContext\r\n      onDragEnd={(parameters) => {\r\n        changePosition(parameters, notesToDisplay);\r\n      }}\r\n    >\r\n      {!notesToDisplay.length && (\r\n        <Alert variant=\"filled\" severity=\"info\" id=\"saveNoteError\" style={styles.noNotes}>\r\n          {MESSAGES.NO_NOTES}\r\n        </Alert>\r\n      )}\r\n      {notesToDisplay.length && (\r\n        <Droppable droppableId=\"droppable-1\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              id=\"scrollableDiv\"\r\n              style={styles.droppable}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n              data-testid=\"scrollableList\"\r\n            >\r\n              <List>\r\n                <InfiniteScroll\r\n                  dataLength={notesToDisplay.length}\r\n                  next={() => setPage(page + 1)}\r\n                  hasMore\r\n                  scrollableTarget=\"scrollableDiv\"\r\n                >\r\n                  {notesToDisplay.map((note, i) => (\r\n                    <Draggable draggableId={\"draggable\" + i} key={note.id} index={i}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={{\r\n                            ...provided.draggableProps.style,\r\n                            boxShadow: snapshot.isDragging ? styles.draggingShadow : \"none\",\r\n                            background: snapshot.isDragging ? styles.draggingBackground : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <NoteContainer\r\n                            note={note}\r\n                            displayChosenNote={displayChosenNote}\r\n                            shareNote={shareNote}\r\n                            removeNote={removeNote}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </InfiniteScroll>\r\n              </List>\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      )}\r\n    </DragDropContext>\r\n  </div>\r\n);\r\nNotes.propTypes = {\r\n  notesToDisplay: PropTypes.arrayOf(PropTypes.object),\r\n  displayChosenNote: PropTypes.func,\r\n  setPage: PropTypes.func,\r\n  page: PropTypes.number,\r\n  shareNote: PropTypes.func,\r\n  removeNote: PropTypes.func,\r\n};\r\nexport default Notes;\r\n","import axios from \"axios\"\r\n\r\nimport URLS from \"config/constants/url\"\r\nimport INIT from \"config/constants/initial\";\r\n\r\nconst shareNoteWithUsers = (idToShare, usersToShare, user, setNoteToShare, setUsersToShare, shareNoteOpen, setAlertShare, setShareError) => {\r\n  const noteUrl = URLS.SERVER_SHARE + \"/\" + idToShare;\r\n\taxios({\r\n\t  method: 'PUT',\r\n\t  url: noteUrl,\r\n\t  headers: {Authorization: `Basic ${user}`},\r\n\t  data: {\"users\": usersToShare},\r\n\t})\r\n\t.then((response) => {\r\n    setNoteToShare(INIT.ACTIVE);\r\n    setUsersToShare([]);\r\n    shareNoteOpen(false);\r\n  })\r\n\t.catch((error) => {\r\n    setAlertShare(true);\r\n    setShareError(error.response.data);\r\n  })\r\n}\r\n\r\nexport default shareNoteWithUsers","import {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextareaAutosize,\r\n  Button,\r\n  IconButton,\r\n  Alert,\r\n  Snackbar,\r\n  ListItem,\r\n} from \"@mui/material\";\r\nimport { Cancel, IosShare, Add, Clear } from \"@mui/icons-material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"pages/styled\";\r\nimport toLocalDate from \"utils/toLocalDate\";\r\n\r\nconst HIDE_ALERT = 3000;\r\n\r\nconst ShareNoteForm = ({\r\n  openShare,\r\n  noteToShare,\r\n  usersToShare,\r\n  removeUser,\r\n  setUser,\r\n  setUserToShare,\r\n  userEmailValue,\r\n  addUserToList,\r\n  cancelShare,\r\n  shareNoteSubmit,\r\n  alertShareOpen,\r\n  handleAlertShareClose,\r\n  shareError,\r\n}) => (\r\n  <Dialog open={openShare} onClose={() => {}}>\r\n    <DialogTitle style={styles.shareNote}>Share note</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText style={styles.dialogShare}>\r\n        <h4 style={styles.shareNoteTitles}>Title:</h4>\r\n        <p style={styles.shareNoteText}>{noteToShare.title}</p>\r\n        <h4 style={styles.shareNoteTitles}>Description:</h4>\r\n        <p style={styles.shareNoteText}>{noteToShare.description}</p>\r\n        <h4 style={styles.shareNoteTitles}>Date:</h4>\r\n        <p style={styles.shareNoteText}>{toLocalDate(noteToShare.createdAt)}</p>\r\n      </DialogContentText>\r\n      <DialogContentText style={styles.shareNoteTitles}>Share with:</DialogContentText>\r\n      {usersToShare.map((email, emailId) => (\r\n        <ListItem style={styles.emailsList}>\r\n          <span style={styles.widthEmail}>{email}</span>\r\n          <IconButton style={styles.clearUsers} onClick={(e) => removeUser(emailId)} data-testid=\"removeUser\">\r\n            <Clear fontSize=\"small\" />\r\n          </IconButton>\r\n        </ListItem>\r\n      ))}\r\n      <TextareaAutosize\r\n        id=\"userToShare\"\r\n        placeholder=\"user@gmail.com\"\r\n        value={userEmailValue}\r\n        className=\"activeNote\"\r\n        minRows={null}\r\n        maxLength={40}\r\n        minLength={5}\r\n        style={styles.userToShare}\r\n        onFocus={() => setUser(\"\")}\r\n        onChange={(e) => setUserToShare(e.target.value)}\r\n      />\r\n      <Button style={styles.addUsers} onClick={addUserToList} data-testid=\"addUser\">\r\n        <Add fontSize=\"small\" color=\"inherit\" style={styles.inline} />\r\n        <span>Add</span>\r\n      </Button>\r\n      <Snackbar open={alertShareOpen} autoHideDuration={HIDE_ALERT} onClose={handleAlertShareClose}>\r\n        <Alert onClose={handleAlertShareClose} severity=\"error\" sx={styles.maxWidth}>\r\n          {shareError}\r\n        </Alert>\r\n      </Snackbar>\r\n    </DialogContent>\r\n    <DialogActions style={styles.addNoteButtons}>\r\n      <Button style={styles.cancelShareButton} onClick={cancelShare} data-testid=\"cancelShare\">\r\n        <Cancel style={styles.saveIcon} />\r\n        Cancel\r\n      </Button>\r\n      <Button style={styles.primaryButton} variant=\"contained\" onClick={shareNoteSubmit} data-testid=\"submitShare\">\r\n        <IosShare style={styles.saveIcon} />\r\n        Share\r\n      </Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n);\r\nShareNoteForm.propTypes = {\r\n  openShare: PropTypes.bool,\r\n  noteToShare: PropTypes.object,\r\n  usersToShare: PropTypes.array,\r\n  removeUser: PropTypes.func,\r\n  setUser: PropTypes.func,\r\n  setUserToShare: PropTypes.func,\r\n  userEmailValue: PropTypes.string,\r\n  addUserToList: PropTypes.func,\r\n  cancelShare: PropTypes.func,\r\n  shareNoteSubmit: PropTypes.func,\r\n  alertShareOpen: PropTypes.bool,\r\n  handleAlertShareClose: PropTypes.func,\r\n  shareError: PropTypes.string,\r\n};\r\nexport default ShareNoteForm;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\nimport shareNoteWithUsers from \"api/shareNote\";\r\n\r\nimport ShareNoteForm from \"./ShareNoteForm\";\r\n\r\nconst ShareNoteContainer = ({ user, openShare, noteToShare, setNoteToShare, shareNoteOpen, setAuthorizeAlertOpen }) => {\r\n  const [userEmailValue, setUser] = useState(\"\");\r\n  const [usersToShare, setUsersToShare] = useState([]);\r\n  const [alertShareOpen, setAlertShare] = useState(false);\r\n  const [shareError, setShareError] = useState(\"\");\r\n\r\n  const setUserToShare = (userEmail) => {\r\n    setUser(userEmail);\r\n  };\r\n  const addUserToList = () => {\r\n    if (!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i.test(userEmailValue)) {\r\n      setAlertShare(true);\r\n      setShareError(\"Invalid email format\");\r\n    } else {\r\n      let usersArray = usersToShare;\r\n      usersArray.push(userEmailValue);\r\n      setUsersToShare(usersArray);\r\n      setUser(\"\");\r\n    }\r\n  };\r\n  const shareNoteSubmit = () => {\r\n    shareNoteWithUsers(\r\n      noteToShare.id,\r\n      usersToShare,\r\n      user,\r\n      setNoteToShare,\r\n      setUsersToShare,\r\n      shareNoteOpen,\r\n      setAlertShare,\r\n      setShareError\r\n    );\r\n  };\r\n  const cancelShare = () => {\r\n    setNoteToShare(INIT.ACTIVE);\r\n    setUsersToShare([]);\r\n    setUser(\"\");\r\n    shareNoteOpen(false);\r\n  };\r\n  const removeUser = (emailId) => {\r\n    let usersArray = usersToShare;\r\n    usersArray.splice(emailId, 1);\r\n    setUsersToShare(usersArray);\r\n    setUser(\" \");\r\n  };\r\n  const handleAlertShareClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setAlertShare(false);\r\n  };\r\n  return (\r\n    <ShareNoteForm\r\n      openShare={openShare}\r\n      noteToShare={noteToShare}\r\n      usersToShare={usersToShare}\r\n      removeUser={removeUser}\r\n      setUser={setUser}\r\n      setUserToShare={setUserToShare}\r\n      userEmailValue={userEmailValue}\r\n      addUserToList={addUserToList}\r\n      cancelShare={cancelShare}\r\n      shareNoteSubmit={shareNoteSubmit}\r\n      alertShareOpen={alertShareOpen}\r\n      handleAlertShareClose={handleAlertShareClose}\r\n      shareError={shareError}\r\n    />\r\n  );\r\n};\r\nShareNoteContainer.propTypes = {\r\n  user: PropTypes.string,\r\n  openShare: PropTypes.bool,\r\n  noteToShare: PropTypes.object,\r\n  setNoteToShare: PropTypes.func,\r\n  shareNoteOpen: PropTypes.func,\r\n};\r\nexport default ShareNoteContainer;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport INIT from \"config/constants/initial\";\r\nimport deleteNote from \"api/deleteNote\";\r\n\r\nimport Notes from \"./NotesList\";\r\nimport ShareNoteContainer from \"./actions/ShareNoteContainer\";\r\n\r\nconst NotesListContainer = ({ user, displayChosenNote, notesToDisplay, setNotes, setPage, page }) => {\r\n  const [openShare, shareNoteOpen] = useState(false);\r\n  const [noteToShare, setNoteToShare] = useState(INIT.ACTIVE);\r\n\r\n  const shareNote = (note) => {\r\n    shareNoteOpen(true);\r\n    setNoteToShare(note);\r\n  };\r\n\r\n  const removeNote = (noteId) => {\r\n    deleteNote(noteId, user, setNotes, setPage);\r\n  };\r\n  return (\r\n    <div>\r\n      <Notes\r\n        displayChosenNote={displayChosenNote}\r\n        notesToDisplay={notesToDisplay}\r\n        setPage={setPage}\r\n        page={page}\r\n        shareNote={shareNote}\r\n        removeNote={removeNote}\r\n      />\r\n      <ShareNoteContainer\r\n        user={user}\r\n        openShare={openShare}\r\n        noteToShare={noteToShare}\r\n        setNoteToShare={setNoteToShare}\r\n        shareNoteOpen={shareNoteOpen}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nNotesListContainer.propTypes = {\r\n  user: PropTypes.string,\r\n  notesToDisplay: PropTypes.arrayOf(PropTypes.object),\r\n  displayChosenNote: PropTypes.func,\r\n  setPage: PropTypes.func,\r\n  page: PropTypes.number,\r\n  setNotes: PropTypes.func,\r\n};\r\nexport default NotesListContainer;\r\n"],"sourceRoot":""}